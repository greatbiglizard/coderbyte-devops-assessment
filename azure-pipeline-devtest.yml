trigger:
  branches:
    include:
      - dev
      - test

pool: LocalMachine

variables:

  - name: appName
    value: 'TeknoFireSite-devtest'
  - name: location
    value: 'westeurope'
  - name: customDomain
    value: 'teknofire.noidenterprisesdevtest.com'
  - name: zoneName
    value: 'noidenterprisesdevtest.com'
  - name: siteName
    value: 'teknofire'
  - name: serviceConnection
    value: 'ARM-Service-Connection-for-TeknoFire'
  - name: azureResourceGroup
    value: 'TeknoFire-devtest'
  - name: 'templateFile'
    value: './bicep/main.bicep'
  - name: isMain
    value: $[eq(variables['Build.SourceBranch'], 'refs/heads/test')]

steps:
  - checkout: self
    submodules: true

  - task: AzureCLI@2
    inputs:
     azureSubscription: $(serviceConnection)
     scriptType: bash
     scriptLocation: inlineScript
     useGlobalConfig: false
     inlineScript: |
      az --version
      az group create --name $(azureResourceGroup) --location $(location)
      az deployment group create --resource-group $(azureResourceGroup) --template-file $(templateFile) --parameters repositoryUrl=$(Build.Repository.Uri) repositoryBranch=$(Build.SourceBranchName) appName=$(appName) customDomain=$(customDomain) zoneName=$(zoneName) siteName=$(siteName)

  - task: AzureCLI@2
    displayName: 'Acquire API key for deployment'
    inputs:
      azureSubscription: $(serviceConnection)
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        APIKEY=$(az staticwebapp secrets list --name $(appName) | jq -r '.properties.apiKey')
        echo "##vso[task.setvariable variable=apiKey;issecret=true]$APIKEY"

  - task: AzureStaticWebApp@0
    name: DeployStaticWebApp
    displayName: Deploy Static Web App
    condition: and(succeeded(), eq(variables.isMain, 'true'))
    inputs:
      app_location: '/Static-HTML-Website-main'
      # api_location: 'api'
      output_location: 'build'
      azure_static_web_apps_api_token: $(apiKey)

  - task: AzureStaticWebApp@0
    name: DeployStaticWebAppPreview
    displayName: Deploy Static Web App to named preview environment
    condition: and(succeeded(), ne(variables.isMain, 'true'))
    inputs:
      app_location: '/Static-HTML-Website-main'
      # api_location: 'api'
      output_location: 'build'
      azure_static_web_apps_api_token: $(apiKey)
      deployment_environment: 'dev'

  - task: PowerShell@2
    displayName: "Run Pester tests"
    inputs:
      targetType: "inline"
      script: |
        $tests = (Get-ChildItem -Path ./tests -Recurse | Where-Object {$_.Name -like "*Tests.ps1"}).FullName
        Invoke-Pester $tests
      ignoreLASTEXITCODE: true